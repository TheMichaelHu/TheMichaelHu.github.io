section.sectionContent
  .container
    center
      h1 
        b Projects
    br
    h1 Pinyinify
    p
      | This is a Google Chrome extension I made that that traverses the DOM of web pages I visit and replaces 
      | any Chinese characters with their phonetically spelled-out equivalents(pinyin). Chrome extensions use 
      | JSON to organize information about the extension and javascript for most everything else.
    center
      img(src='img/pinyinify2.jpg', style='width:30%')
    p
      | I originally intended to use some sort of API to do the translation from Chinese characters to pinyin 
      | but Google charges money to use theirs and the few others I found only offered translation to other 
      | languages. I ended up downloading the entirety of the 
      a(href='http://www.unicode.org/reports/tr38/', target='_blank') 
        | Unihan database
      |  and making a parser to grab only Chinese characters and their corresponding unicodes. If you look in the 
      a(href='https://github.com/TheMichaelHu/pinyinify', target='_blank') 
        | source code
      |  you'll find it's far from elegant, but it actually runs faster with everything stored locally and can 
      | even run in offline mode.
    p
      | My extension can be found in the 
      a(href='https://chrome.google.com/webstore/detail/ilgkgfbgiempllndljggnmblmcajbcee', target='_blank') 
        | Chrome Store
      | .
    center
      img(src='img/pinyinify.jpg', style='width:65%')
    br
    center
      button(type="button" class="btn btn-default" data-toggle="collapse" href="#moreProjects")
        | toggle view all projects
    #moreProjects.collapse
      h1 Playlstr
      p
        | Playlstr is an online playlist webapp hosted on Heroku. I worked on its developement along with four 
        | other Northeastern students at 
        a(href='http://hackbeanpot.com/', target='_blank') 
          | HackBeanpot
        |  2014. The app was built using Node.js and uses Youtube and SoundCloud API to produce results for the 
        | string the client searches for. Using the 
        a(href='http://playlstr.herokuapp.com/user', target='_blank') 
          | user page
        | , clients can queue up songs for the playlist which can then be listened to on the 
        a(href='http://playlstr.herokuapp.com/listener', target='_blank') 
          | listener page
        | . Searching a string will produce two lists for the client to choose from: most viewed Youtube videos 
        | from that search and most popular SoundCloud songs.
      center
        img(src='img/playlstr.jpg')
      p
        | This app is only meant to support one listener at a time, although in theory it's possible to have multiple 
        | listeners without cross-contamination. This app also works as a song sharing site, clients would queue up 
        | songs they want to share with strangers on the user page and then listen to a random song from somebody 
        | else on the listener page.
      p
        | My role in the team consisted of helping design the app, researching how each API would be integrated, 
        | and designing the website's background image so that it would have the same theme as Disney's Frozen
        | (because why not).
      p
        | The source code for Playlstr can be found 
        a(href='https://github.com/tomxhu/playlistmaker', target='_blank') 
          | here
        | .
      p
        i
          | Edit: As of April 20, 2015, Youtube API v2 has been retired. Because Youtube API v3 does not support 
          | anonymous queries, Playlistr's Youtube search features no longer work. I'll be attempting to integrate 
          | the new API as a later project.
      br
      h1 Server-based Games
      p
        | For Fundamentals of Computer Science II, we used the Racket Universe library to design and create games 
        | that could be played by two clients over a server. Two player Pong was rather easy because of the 
        | simplicity of the game's rules. The clients each controlled the position of the paddle while the server 
        | handled the ball's position and making sure the paddles weren't cheating be moving too fast.
      center
        img(src='img/pong.jpg')
      p
        | Checkers was a lot more difficult because of more complicated rules such as turns, king me's, and 
        | multiple jumps. To prevent cheating, every move a player made had to be checked and approved by the 
        | server before it became official.
      center
        img(src='img/checkers.jpg')
      p
        | Because these projects may be recycled in following years, I've chosen not to share the source code.
      br
      h1 Space Invaders
      p
        | Also for Fundamentals of Computer Science II, a classmate and I designed our own full-featured version of 
        | Space Invaders using Java.
      center
        img(src='img/spaceInvaders.jpg')
      p These features include:
      ul
        li Score, lives, levels
        li Aliens that take multiple hits
        li A shooting player and aliens that shoot back
        li Defences
        li Powerups(speed+, multi-shot) and bonuses(ufo)
        li Authentic alien movement
      p Obviously some of these features are not canon, those features are improvements.
      center
        img(src='img/spaceInvaders2.jpg')
      p
        | Because these projects may be recycled in following years, I've chosen not to share the source code.
      br
      h1 Frisbee Trajectory/Machine Vision
      p
        | On my robotics team, I spent some time working on Machine Vision. During the 2013 season, robots were 
        | tasked with launching frisbees through rectangular goals lined with retro-reflective fabric. Using data 
        | from the robot and 
        a(href='http://scripts.mit.edu/~womens-ult/frisbee_physics.pdf', target='_blank') 
          | an MIT paper on frisbee physics
        | , I wrote a java app to predict the trajectory of a frisbee launched from our robot.
      center
        img(src='img/diskSim.jpg')
      p
        | Also, using API from a program called 
        a(href='http://www.roborealm.com/', target='_blank') 
          | RoboRealm
        |  we were able to get the measurements of a target goal as seen from the camera mounted on the robot. 
        | Using known constants such as the height and angle of the camera, the camera's field of view, robot's 
        | location, and field measurements in conjunction with the data from RoboRealm, we were able to get the 
        | camera's distance from the target goal with an error of a few inches.
      center
        img(src='img/diskSim2.jpg')
      p
        | Knowing the distance from the goal and the launcher's angle provided suffcient information to calculate 
        | the necessary velocity for a frisbee to be scored.
      br
      h1 Website Design
      p
        | I've worked with a few sites before. The one pictured below is from my days as the webmaster of my 
        | school's robotics team. Right now I'm on the team working on the website for the 
        a(href='http://www.ecaasu2015.org/', target='_blank') 
          | ECASSU
        |  conference held in Boston in 2015. 
        center
          img(src='img/website.jpg')
        br
      h1 Graphic Design
      p
        | For graphic design work I do a lot of self portraits for fun/personal use. Freshman year of college 
        | I was part of Northeastern's 
        a(href='http://nucsa.org/', target='_blank') 
          | Chinese Student Association
        | 's eboard as its media specialist where, amoung other things, I was tasked with designing all the posters 
        | for CSA's events.
      center
        img(src='img/poster.jpg')
        button(type="button" class="btn btn-default" data-toggle="collapse" href="#moreProjects")
          | toggle view all projects